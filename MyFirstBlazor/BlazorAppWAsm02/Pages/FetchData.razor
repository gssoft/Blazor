@page "/fetchdata"
@using System.Runtime.CompilerServices
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private static readonly string[] Summaries = new[]
    {
        "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
    };

    private WeatherForecast[]? _forecasts;

    protected override async Task OnInitializedAsync()
    {
        // MyService.Message();
        // _forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        // _forecasts = await MyService.GetForecastsAsync();
        _forecasts = await MyService.GetWeatherForecastsAsync();
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    public class MyService
    {
        public static IEnumerable<WeatherForecast> GetWeatherForecasts()
        {
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = Summaries[Random.Shared.Next(Summaries.Length)]
            }).ToArray();
        }
        public static Task<WeatherForecast[]> GetWeatherForecastsAsync()
        {
            var maxIndex = Random.Shared.Next(5, 26);
            return Task.FromResult(Enumerable.Range(1, maxIndex).Select(index =>
                new WeatherForecast
                {
                    Date = DateOnly.FromDateTime(DateTime.Now.AddDays(index)),
                    TemperatureC = Random.Shared.Next(-20, 58),
                    Summary = Summaries[Random.Shared.Next(Summaries.Length)]
                }).ToArray());
        }
        public static Task<WeatherForecast[]> GetForecastsAsync()
        {
            WeatherForecast[] ar =
            {
                new WeatherForecast
                {
                    Date = new DateOnly(2021, 1, 2),
                    Summary = "good",
                    TemperatureC = 25
                },
                new WeatherForecast
                {
                    Date = new DateOnly(2022, 3, 4),
                    Summary = "Bad",
                    TemperatureC = 26
                },
                new WeatherForecast
                {
                    Date = new DateOnly(2023, 5, 6),
                    Summary = "BadOnly",
                    TemperatureC = 32
                },
                new WeatherForecast
                {
                    Date = new DateOnly(2024, 7, 8),
                    Summary = "Norm",
                    TemperatureC = 42
                },
                new WeatherForecast
                {
                    Date = new DateOnly(2023, 9, 14),
                    Summary = "Terrible",
                    TemperatureC = 35
                }
            };
            return Task.FromResult(ar);
        }
    }
}
